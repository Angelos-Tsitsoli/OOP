Όνομα:Άγγελος Τσιτσόλη
A.M: 1115202000200
Εντολή μεταγλώτισσης: g++ -o ergasia ergasia.cpp ergasiamain.cpp
Μια εντολή εκτέλεσης: ./ergasia 4 3 1 80 και κάθε τμήμα με χωρητικότητα 4 (αυτο είναι δοκισμένο γιαυτό και αναφέρεται αυτό )
*Μια ακόμη ειναι : ./ergasia 3 5 2 80 και κάθε τμήμα χωρητικότητα 2 3 4 5 6

Στο .h αρχείο συμπεριλαμβάνονται μέσω των include 
Προσπάθησα να κάνω οσο αναλυτικότερα γίνετε την εργασία όσων αφορά τις εκτυπώσεις για να γίνετε αντιληπτή  όσο γίνετε κάθε κίνηση και κάθε κατάσταση των parts του Highway και πιο καθαρή όσο αφορά το αποτέλεσμα στο Terminal αφήνοντας αρκετά κενά.

Αρχικά γίνεται μια αναφορά της κλάσης Highway_part προκειμένου να γίνει σωστά το class forwarding διότι η κλάση Highway χρησιμοποιεί αντικείμενα τύπου Highway_part παρόλαυτα στο σημείο αυτό δεν έχει υλοποιηθεί ακόμα η Highway part κλάση οπότε απιτείται μία δήλωση αρχικά.

Να σημειωθεί ότι όσες συναρτήσεις έχουν στο όνομα αρχικά τη λέξη get_... αποτελεί (accesor) και η συνάρτηση αυτή εφόσον δεν θέλουμε να αλλάξει το περιεχόμενο του δηλώνονται ως const , διότι απλώς χρειαζόμαστε το περιεχόμενο της μεταβλητής. Εκτός απο την get_kenes_theseis.

Στο .h αρχείο γίνονται μόνο οι δηλώσεις των κλάσεων και των μελών τους. Στο .cpp αρχείο γίνεται η υλοποίηση τους. 

Στην κλάση Highway έχουμε στο private μέρος οριμένες μεταβλητές οι οποίες δεν χρειάζεται να είναι προσβάσιμες απο άλλες κλάσεις γιαυτό και είναι private.
Η μεταβλητή capacity_of_vehicles_in_part αποθηκεύει τον αριθμό των οχημάτων που μπορεί να δεχτεί ένα τμήμα.
Η μεταβλητή _Ν δέχεται τον αριθμό των τμημάτων στην Αττική οδό.
Οι μεταβλητές Percentage και Percentage_holder αποθηκεύουν το ποσοστό των οχημάτων που θα είναι σε ετοιμότητα συγκεκριμένα η Percentage_holder κρατάει τον αριθμό που προκύπτει απο την μετατροπή του ποσοστού .
Ο πίνακας array1 έχει ρόλο να αποθηκεύει τα τμήματα της Αττικής οδού .
Η μεταβλητή number_of_tolls αποθηκεύει αριθμό των διοδίων με υπαλλήλους.
Η μεταβλητή number_of_tolls2 αποθηκεύει τον αριθμό των ηλεκτρονικών διοδίων .
Δίννται τυχαίες τιμές στις μεταβλητές number_of_tolls,num_of_tolls2 στην κλάση Highway προκειμένου να δωθούν σε κάθε τμήμα του πίνακα array1 τυχαίοι αριθμοί.
Τέλος η μεταβλητές vehicle_counter και vehicle_counter2 αποτελούν μετρητές που θα μετρούν τα οχήματα που βρίσκονται συνολικά στην Αττική οδό αρχικά και κατά τις διαδικασίες των parts.
Στο public μέρος αναλύονται στην συνέχεια οι συναρτήσεις που υλοποιούνται στην κλάση αυτή. 

Highway::Highway(int Nsegs,int number_of_vehicles,double Percent,int K):_N(Nsegs),Percentage(Percent)
O constructor της αττικής οδού δέχεται ως ορίσματα το Νsegs το οποίο αποτελεί το πλήθος των τμημάτων της αττικής οδού , δέχεται επίσης  ως όρισμα μια μεταβλητή double η οποία έχει το όνομα Percent και αποτελεί το ποσοστό των οχημάτων τα οποία θα είναι σε κατάσταση "ετοιμότητας" όπως αναφέρεται στην εκφώνηση και τέλος το Κ αποτελεί το μέγιστο αριθμό οχημάτων που μπορούν να εισέλθουν σε ενα τμημα απο διοδια με εισπράκτορα .
Με τον αριθμό των τμημάτων (Νsegs) αρχικοποιείται η ακέραια μεταβλητή _Ν μέσω initializer list προκειμένου να χρησιμοποιηθεί, στην συνέχεια στην συνάρτηση operate της κλάσης Highway όπως και στον destructor , ομοίως αρχικοποιείται και η μεταβλητή τύπου double Percentage με την τιμή του ποσοστού Percent που θα δωθεί απο τα ορίσματα του constructor της Highway και θα χρησιμοποιηθεί στην συνέχεια.
Αρχικά μέσα στον constructor της κλάσης Highway συναντάται η εντολή srand(time(NULL));  η οποία χρησιμοποιείται ουσιαστικά προκειμένου οταν κληθούν οι rand συναρτήσεις στην συνέχεια  να δίνουν τυχαίους αριθμούς κάθε φορά που καλούνται και κάθε φορά που τρέχει το πρόγραμμα να δίνουν πάλι διαφορετικούς αριθμούς .
Η μεταβλητή capacity_of_vehicles_in_part παίρνει έναν αριθμό που θα της δίνουμε εμείς.Η μεταβλητή Percentage αυτό που κάνει είναι να δέχεται ένα ποσοστό που του δίνουμε εμείς για το πόσα σε αριθμό οχήματα θα θεωρούνται σε ετοιμότητα αρχικά ο αριθμός ο αρχικός που δίνεται αποθηκεύεται στην μεταβλητή Percentage_holder και έπειτα στην γραμμή 21 το ποσοστό θα μετατραπεί σε αριθμός πραγματικός με την βοήθεια της μεταβλητής Percentage holder και ο αριθμός που θα προκύψει θα δωθεί πάλι στην μεταβλητή Percentage  , δηλαδή δίνουμε απο το command line ένα ποσοστό π.χ. 80% το οποίο θα το δώσουμε ως αριθμό δηλαδή 80 στο command line , τον αριθμό αυτό θα τον πάρει ως όρισμα ο constructor της κλάσης Highway και θα το διαιρέσει με το 100 εφόσον αποτελεί ποσοστό , άρα 0,8 και στην συνέχεια θα τον πολλαπλασιάσει με τον αριθμό των οχημάτων που μπορεί να πάρει ένα τμήμα, έστω ότι ο αριθμός των οχημάτων που μπορεί να πάρει ένα τμήμα είναι 4 άρα 0,8*4=3,2 η οποία τιμή θα δωθεί στην μεταβλητή Percentage , απαιτείται ωστόσο να είναι ακέραιοςο αριθμός ο αριθμός στην μεταβλητή Percenatge ,γιαυτό λοιπόν όταν δωθεί η τιμή του Percentage ως όρισμα στον constructor του Highway_part  θα γίνει cast απο double σε int δίοτι η θέση εκείνου το ορίσματος στον constructor της κλάσης Highway_part θα είναι τύπου int και εφόσον του δίνεται η μεταβλητή τύπου double Percentage θα γίνει αυτόματα η μετατροπή διατηρώντας το ακέραιο μέρος του αριθμού. 
Για την  μεταβλητή Percent θα δίνεται απο το command line ένας αριθμός διψήφιος πάντα ο οποίος θα αντιστοιχεί στο ποσοστό που θελουμε τα οχήματα μέσα στο τμήμα να είναι έτοιμα , δηλαδή 80%->80 , 70%->70....
Στην συνέχεια δημιουργείται ένας πίνακας array1 τύπου Highway_part και θα έχει χωρητικότητα ίση με Nsegs . Ο πίνακας αυτός που δημιουργείτυαι δυναμικά θα αποτελείται απο τα τμήματα της Αττικής οδού (για την δημιουργία των πινάκων του προγράμματος συμβουλεύτηκα απο το Lists το Tutorial Material) .Ο πίνακας θα είναι δυναμικός διότι  κάθε αντικείμενο του πίνακα θα αρχικοποιηθεί με συγκεκριμένα ορίσματα, άρα πρέπει να δημιουργηθεί κάθε αντικείμενο δυναμικά και ο πίνακας να είναι πίνακας με δείκτες σε αυτά τα αντικείμενα επίσης το μέγεθος του πίνακα δεν είναι σταθερό πάντα, άρα είναι απαραίτητο ο πίνακας με τους δείκτες με τη σειρά του να δεσμευτεί δυναμικά.
Απο κάτω μέσω του βρόγχου for αυτό που θα γίνει είναι αρχικά να δωθούν δύο τυχαίες τιμές στις μεταβλητές number_of_tolls και number_of_tolls2 για τον αριθμό των διοδίων με εισπράκτορα και για τον αριθμό των ηλεκτρονικών διοδίων σε κάθε τμήμα διαφορετικά (όπου ο αριθμός αυτός θα κυμαίνεται απο το 1 εώς το 5 υπάρχει δηλαδή τουλάχιστον ένα διόδιο κάθε είδους), επίσης ο βρόγχος αυτός  είναι υπεύθυνος να γεμίσει τον πίνακα των δεικτών με δείκτες σε αντικείμενα τύπου Highway_part.
Συγκεκριμένα για κάθε επανάληψη (δηλαδή για κάθε τμήμα )δίνονται δύο τυχαίες τιμές στις μεταβλητές number_of_tolls και number_of_tolls2 έπειτα εκτυπώνεται το μήνυμα για την εισαγωγή ενός αριθμού όσον αφορά την χωρητικότητα του συγκεκριμένου τμήματος έπειτα θα γίνει η μετατροπή του ποσοστού ανάλογα με την χωρητικότητα του τμήματος και στην συνέχεια θα δημιουργηθεί ένα τμήμα με ορίσματα την χωρητικότητα του τμήματος , τον αριθμό των τμημάτων , το ποσοστό ετοιμότητας, την θέση του τμήματος στην Αττικη οδό , τον αριθμό μέχρι τον οποίο επιτρέπεται ηεισαγωγή οχημάτων απο είσοδο και ο αριθμός των διοδίων κάθε είδους για το τμήμα τέλος στον βρόγχο ενημερώνεται ο μετρητής οχημάτων με τα συνολικά οχήματα στην Αττική οδό.
Κάτω απο τον πρώτο βρόγχο βρίσκεται άλλος ένας βρόγχος ο οποίος αυτό που θα κάνει ουστιαστικά είναι να καλεί για κάθε τμήμα την συνάρτηση link_parts η οποία θα δέχεται σαν όρισμα ένα τμήμα και το επόμενο του και αυτό που θα γίνεται είναι να ενώνονται εν τέλει τα τμήματα μεταξύ τους.
Στο τέλος του constructor εκτυπώνεται και ένα μήνυμα για το πόσα οχήματα υπάρχουν αρχικά.

Highway::link_parts
Η συνάρτηση link_parts αυτό που θα κάνει είναι ουσιαστικά να δέχεται ένα τμήμα και το επόμενο του στον πίνακα τμημάτων  και μέσω της συνάρτησης _pointernext δείκτη τύπου Highway_part  του αριστερού ορίσματος όπως τα δέχεται η συνάρτηση (το οποίο θα είναι το προηγούμενο τμήμα του δεξιού ορίσματος,  το οποίο δεξί όρισμα θα είναι το επόμενο τμήμα του αριστερού ορίσματος  στον πίνακα τμημάτων)θα δείχνει στο δεξί όρισμα της συνάρτησης το οποίο είναι αντικείμενο τύπου Highway_part  . Αυτο που γίνεται είναι ο δείκτης pointernext ενός τμήματος μέσα απο την _pointernext συνάρτηση  θα δείχνει στο επόμενο του τμήμα της Αττικής οδού μέσα στο πίνακα τμημάτων array1.


Highway::operate
Η συνάρτηση operate της Highway αυτό που θα κάνει είναι να καλέσει την συνάρτηση operate της κλάσης Highway_part για κάθε τμήμα του πίνακα τμημάτων array1 και η operate του τμήματος θα δέχεται σαν όρισμα τη  μεταβλητή Percentage , επίσης θα καλείται η συνάρτηση enter_highway για κάθε τμήμα του πίνακα τμημάτων array1 . Οι κλησεις αυτές θα γίνουν απο το τελευταίο τμήμα προς το πρώτο για το operate του του κάθε τμήματος και απο το πρότελευταιο τμήμα μέχρι το πρώτο για την entry κάθε τμήματος διότι το τελευταίο τμήμα δεν έχει είσοδο.Να σημειωθεί ότι για κάθε διαδικασία εισαγωγής οχημάτων από είσοδου ενημερώνεται ο μετρητής vehicle_counter2 ο οποίος προσθέτει τα οχήματα που έχουν μείνει σε κάθε τμήμα απο το πρώτο μέχρι και το πρότελευταιο και μόλις τελείωσει η διαδικασία εισαγωγής στα τμήματα αυτά προστίθεται στον μετρητή vehicle_counter2 και τα οχήματα που υπάρχουν στο τελευταίο τμήμα προκειμένου να έχουμε μετά συνολικά τα οχήματα στην Αττική οδό μέσω της πρόσθεσης των οχημάτων απο το πρώτο μέχρι το τελευταίο τμήμα και όσων οχημάτων έμειναν στο τελευταίο τμήμα . Χρησιμοποιείται η συνάρτηση get_no_of_vehicles προκειμένου να δωθεί ο αριθμός οχημάτων μέσα σε ένα τμήμα διότι η μεταβλητή number_of_vehicles είναι ιδιωτική σε κάθε τμήμα.


Highway::~Highway
Τέλος ο destructor της κλάσης Highway θα διαγράψει όλα τα στοιχεία του πίνακα , θα διαγράψει τον πίνακα και θα εκτυπώσει ένα μήνυμα ότι καταστράφηκε η Αττική οδός.

Highway_part 
Η κλάση αυτή θα παριστάνει ένα τμήμα σε στην Αττική οδό.
Στο .h αρχείο αρχικά οι κλάσεις entrance και vehicle προηγούνται απο την συγκεκριμένη κλάση διότι χρησιμοποιούνται αντικείμενα αυτών των τύπων οπότε θα πρέπει να έχουν οριστεί παραπάνω στο αρχείο.
Στο private της η κλάση διαθέτει την μεταβλητή _capacity_of_vehicles_in_part η οποία δείχνει την χωρητικότητα του κάθε τμήματος σε οχήματα , η μεταβλητή _Percentage δέχεται τον αριθμό που αντιστοιχεί στο ποσοστό ετοιμότητας που θα δωθεί στο command line , η μεταβλητή _Nsegs δέχεται τον αριθμό των τμημάτων , η μεταβλητή _Κ δέχεται το όριο εισαγωγής οχημάτων απο σε τμήμα απο διόδια με εισπράκτορα , η μεταβλητή vehicles χρησιμοποιείται για τον αριθμό των οχημάτων που δίνοναι αρχικά στρο τμήμα κατα την κατασκευή του , η μεταβλητή random δέχεται ένα τυχαίο αριθμό και θα χρησιμοποιηθεί για επιλογή οχημάτων απο τον πίνακασ του τμήματος , η μεταβλητή p θα χρησιμοποιηθεί μόνο για την προσπέλαση του πίνακα οχημάτων του τμήματος , η μεταβλητή pas θα χρησιμοποιηθεί όταν καλεσθεί η συνάρτηση pass και θα δέχεται τιμές 0 αν έγινε σωστά η διαδικασία ή 1 αν εν τέλει δεν μεταφέρθηκε το όχημα λόγω του ότι ο πινακας επόμενου τμήματος ήταν ήταν γεμάτος , η μεταβλητή j στην operate στην διαδικασία ταξινόμησης , η μεταβλητή n θα χρησιμοποιηθεί για προσπέλαση στοιχείων ενός τμήματος συγκεκριμένα το επόμενο τμήμα του τμήματος που εξετάζουμε , η μεταβλητή q θα χρησιμοποιηθεί για την προσπέλαση του πίνακα οχημάτων του τμήματος στην συνάρτηση enter του τμήματος , οι μεταβλητές count1,count3,count4 θα χρησιμοποιηθούν στην συνάρτηση enter της κλάσης κατά την διάρκεια εισαγωγής οχημάτων απο ηλεκτρονικά και διόδια με εισπράκτορες, ο δείκτης entr θα χρησιμοποιηθεί για την δημιουργία εισόδου του τμήματος σε όλα τα τμήματα εκτός απο το τελευταίο , ο δείκτης transporter θα χρησιμοποιηθεί για την μεταφορά οχημάτων , η μεταβλητή count5 θα χρησιμοποιηθεί για το μέτρημα των οχημάτων που μεταφέρονται σε άλλα τμήματα , η μεταβλητή count6 θα χρησιμοποιηθεί για το μέτρημα των οχημάτων που είναι έτοιμα σε κάθε τμήμα , η μεταβλητή number_of_vehicles μετράει τον αριθμό των οχημάτων , η μεταβλητή place_of_part_in_highway αποθηκεύει τη θέση του τμήματος στην Αττική οδό , ο πίνακας array2 αποτελεί αποθηκευτικό χώρο για τα οχήματα που έχει κάθε τμήμα , η μεταβλητή ready_counter μετράει τον αριθμό των έτοιμων οχημάτων , η μεταβλητή kenes_theseis μετράει της κενές θέσεις που διαθέτει ο πίνακας του τμήματος.
Στο public μέρος υλοποιούνται μερικές πολυ μικρές συναρτήσεις η increase_number_of_vehicles αυξάνει τον αριθμό των οχημάτων του τμήματος , η  get_place_of_part_in_highway επιστρέφει την θέση του τμήματος στην Αττική οδό και δηλώνεται const προκειμένου να μην υπάρξει κάποια μεταβολή στην μεταβλητή που που επιστρέφει, η συνάρτηση get_kenes_theseis που θα κάνει είναι να ψάξει για κενές θέσεις στον πίνακα του τμήματος και έπειτα να επιστρέφει τον αριθμό .
Ν σημειωθεί και η συνάρτηση _pointernext στην οποία ο δείκτης pointernext του τμήματος θα δείχνει στο επόμενο του τμήμα. Μετά την συνάρτηση get_kenes_theseis ακολουθούν ο constructor , o destructor της κλάσης και οι συναρτήσεις οι οποίες θα εξηγηθούν και έπειτα.


Highway_part::Highway_part
Στον constructor της η κλάση αυτή δέχεται ως ορίσματα την χωριτικότητα κάθε τμήματος απο αμάξια , προκειμένου να δημιουργηθούν στην συνέχεια δυναμικοί πίνακες(capacity_of_vehicles_in_part) όπως και η είσοδος , δέχεται τον αριθμό των τμημάτων (Νsegs) προκειμένου να δωθεί ως όρισμα σε ένα όχημα όταν δημιουργηθεί αλλά και σε περιπτώσεις παρακάτω όπου εξετάζεται αν η θέση του τμήματος είναι η τελευταία και στην δημιουργία μιας εισόδου , επίσης δέχεται το ποσοστό των αυτοκινήτων που θα είναι σε ετοιμότητα προκειμένου να εφαρμοστεί στα οχήματα του πίνακα οχημάτων του τμήματος ,ακόμα δέχεται τη θέση του τμήματος στον πίνακα τμημάτων , επίσης δέχεται σαν όρισμα τον μέγιστο αριθμό των οχημάτων που μπορούν να δωθούν στο τμήμα απο την είσοδο και η οποία θα χρειαστεί όσον αφορά την συνάρτηση enter του τμήματος και τον αριθμό των διοδίων με υπαλλήλους και των ηλεκτρονικών διοδίων τα οποία θα δωθούν ως ορίσματα κατά την δημιουργία της εισόδου.
Θα αρχικοποιηθούν  στον constructor η μεταβλητή  _capacity_of_vehicles_in_part με την τιμή της χωρητικότητας του τμήματος διότι θα χρησιμοποιηθεί η τιμή αυτή στις επόμενες συναρτήσεις ,  επίσης στην μεταβλητή _Κ θα δωθεί το Κ διότι μέσω η μεταβλητής _Κ θα χρησιμοπιηθεί στην συνάρτηση enter του τμήματος διότι θα χρειαστεί κατα τις εισόδους των οχημάτων στο τμήμα απο τα διόδια, επίσης θα δωθεί στην μεταβλητή _Percentage η τιμή του ορίσματος Percentage η οποία θα χρησιμοποιηθεί μάλιστα στην συνάρτηση operate.
Θα δωθεί στην μεταβλητή  place_of_part_in_highwayη τιμή του highway_place (την θέση δηλαδή του τμήματος )διότι θα χρησιμοποιηθεί αρκετά στην συνέχεια και σε άλλες συναρτήσεις έπειτα.
Στην συνέχεια θα γίνουν οι κατάλληλες εκτυπώσεις όσον αφορά το τμήμα που κατασκευάζεται και τον αριθμό κάθε είδους διοδίων στο τμήμα .
Η τιμή vehicles θα πάρει μια τυχαία τιμή απο το 1 μέχρι την τιμή χωρητικότητας του τμήματος, η τελική τιμή θα δωθεί στην μεταβλητή number_of_vehicles , άρα η  μεταβλητή  number_of_vehicles θα διαθέτει τον αριθμό των οχημάτων στον τμήμα , και απο κάτω θα εκτυπωθεί ο αριθμός οχημάτων . Μόνο σε περιπτώσεις όπου το τμήμα δεν είναι τελευταίο στον πίνακα τμημάτων θα φτιαχτεί μία είσοδος για το τμήμα , αυτό γίνετε διότι το τελευταίο τμήμα δεν θα διαθέτει είσοδο , η οποία είσοδος θα είναι ένας δείκτης τύπου entrance και θα δείχνει σε ένα αντικείμενο που δημιουργείται εκείνη την στιγμή σε περίπτωση μόνο που το τμήμα δεν είναι το τελευταίο. Ακριβώς κάτω απο την δημιουργία της εισόδου  δημιουργείται ο πίνακας του τμήματος ο οποίος θα διαθέτει οχήματα και θα έχει μέγεθος όσο η τιμή του capacity_of_vehicles_in_part ο οποίος πίνακας θα είναι δυναμικός κάθε αντικείμενο του πίνακα θα αρχικοποιηθεί με συγκεκριμένα ορίσματα, οπότε θα δημιουργηθεί  κάθε αντικείμενο δυναμικά και ο πίνακας θα είναι πίνακας με δείκτες σε αυτά τα αντικείμενα επίσης  το μέγεθος του πίνακα είναι μεταβλητό , επομένως ο πίνακας με τους δείκτες θα δεσμευτεί δυναμικά
Ο πίνακας με τα οχήματα θα αρχικοποιηθεί αρχικά με Null μέσω της  for η οποία θα γίνει τόσες επαναλήψεις όσες η τιμή της μταβλητής capacity_of_vehicles_in_part η οποία θα αποτελεί το μέγεθος του πίνακα.
Στην συνέχεια μέσω της επόμενης for, οι δείκτες σε κάθε θέση του πίνακα θα δείχνουν σε αντικείμενα τύπου vehicle  το οποίο δημιουργείται εκείνη την στιγμή με τα κατάλληλα ορίσματα και δίνεται και ένας προορισμός στα οχήματα . Σε περίπτωση που το τμήμα είναι το τελευταίο ο προορισμός των αντικειμένων τύπου vehicle στο τμήμα αυτό θα είναι το τελευταίο τμήμα , δηλαδή το τμήμα στο οποίο βρίσκονται προκειμένου τα οχήματα που θα είναι σε ετοιμότητα και θα βρίσκονται στο τμήμα αυτό να αποχωρούν απο το τμήμα.
Επήσης θα εκτυπώνετε ένα μήνυμα ότι λόγω του γεγονότος ότι το όχημα βρίσκεται στο τελευταίο τμήμα θα έχει προορισμό το ίδιο το τμήμα προκειμένου να βγεί.Τέλος γίνετε εκτύπωση της διεύθυνσης κάθε οχήματος του πίνακα array2 του τμήματος.

Highway_part::get_no_of_vehicles
Το μόνο που θα κάνει η συνάρτηση αυτή είναι να επιστρέψει τον αριθμό των οχημάτων και εφόσον το μόνο που κάνει είναι να δίνει το περιεχόμενο μιας μεταβλητής δηλώνεται ως const προκειμένου να μην επιτρέπονται τυχόν μεταβολές.

Highway_part::operate
Αρχικά εκτυπώνεται ένα μήνυμα ότι ξεκινάει η διαδικασία operate και σε ποιο τμήμα ξεκινάει.
Μέσω μιας συνάρτησης for θα γίνονται έτοιμα τα οχήματα του τμήματος . Η διαδικασία αυτη θα γίνει _Percentage φορές δηλαδή τόσες φορές όσες ο αριθμός που προκύπτει απο το ποσοστό που δίνουμε αρχικά .Σε περίπτωση που ο αριθμός των οχημάτων είναι μικρότερος απο τον αριθμό του ποσοστού οχημάτων που θέλουμε να είναι σε ετοιμότητα τότε με την σειρά θα γίνουν έτοιμα τα οχήματα  αφού ελεγχθεί ταυτόχρονα αν η συγκεκριμένη θέση του πίνακα είναι κενή. Μέσα στην πρώτη if προκύπτει η δεύτερη if η οποία ελέγχει αν η θέση του πίνακα δεν είναι κενή αλλά έχει έτοιμο όχημα επομένως θα συνεχιστεί η διαδικασία για το επόμενο όχημα.Στην τρίτη if ελέγχεται αν το όχημα στην θέση αυτή δεν είναι έτοιμο οπότε και θα γίνει έτοιμο εκέινη την στιγμή θα αυξηθεί ο μετρητής των έτοιμων οχημάτων και θα εκτυπωθεί το ανάλογο μήνυμα επίσης θα αυξηθεί και ο μετρητής count6 για τα έτοιμα οχήματα.Στην τέταρτη if εξετάζεται αν ο αριθμός των οχημάτων είναι μεγαλύτερος απο το ποσοστό των οχημάτων που θέλουμε σε ετοιμότητα οπότε στην περίπτωση αυτή σε σχέση με την προηγούμενη υπάρχει η δυνατότητα τυχαίας επιλογής οχημάτων ώστε να γίνουν έτοιμα.Επομένως επιλέγεται ένας τυχαίος αριθμός απο τις θέσεις του πίνακα αν η συγκεκριμένη θέση δεν είναι κενή και το όχημα δεν είναι έτοιμο τότε γίνεται έτοιμο , αυξάνεται ο μετρητής ready_counter και εκτυπώνεται το ανάλογο μήνυμα και αυξάνεται ο μετρητής count6 .Ωστόσο σε περίπτωση ακριβώς κάτω που η θέση του πίνακα δεν είναι κενή αλλα είναι έτοιμο το όχημα και τα οχήματα μέσα είναι περισσότερα απο το ποσοστό ετοιμότητας που βάλαμε και τα έτοιμα οχήματα είναι λιγότερα απο τα οχήματα του τμήματος  δηλαδή για το τελευταίο πρέπει να ισχύει ότι δεν είναι όλα τα στοιχεία του πίνακα έτοιμα , να βρεθεί απο κάτω μέσω της while ένας καινούργιος αριθμός τυχαίος μέχρι να βρεθεί όχημα που δεν είναι έτοιμο  και να το κάνει έτοιμο όσο δεν έχουν γίνει _Percentage επαναλήψεις .
Στην γραμμή 197 ξεκινάει η διαδικασία τυχαίας μεταφοράς οχημάτων του πίνακα . Επομένως αν το τμήμα δεν είνσι το τελευταίο και τα έτοιμα οχήματα είναι περισσότερα απο τις κενές θέσεις του πίνακα του επόμενου τμήματος τότε θα βρεθέι ένας τυχαίος αριθμός μεταξύ των θέσεων του πίνακα για να γίνει τυχαία μεταφορά έτοιμου οχήματος αν ισχύουν οι προυποθέσεις τότε θα γίνει μεταφορά του , αλλιώς ακολουθεί η while μέχρι να βρεθεί με τυχαίο τρόπο ένα όχημα έτοιμο ώστε να γίνει μεταφορά του.Αλλίως αν τα έτοιμα οχήματα δεν είναι περισσότερα τότε να γίνουν τα ακόλουθα παρακάτω.
Όσο η θέση του πίνακα που εξετάζεται δεν είναι κενή τότε θα γίνου οι εντολές που ακολουθούν.
Αν η συγκεκριμένη θέση του πίνακα  είναι κενή ή έχει φτάσει στο τέλος του πίνακα ο έλεγχος δηλαδή έχει προσπελαστεί και η τελευταία θέση του πίνακα (_capacity_of_vehicles_in_part-1 ) και έχει αυξηθεί κατά ένα το p οπότε βγαίνει εκτός του πίνακα , άρα σε περίπτωση που  έχουν συμβεί αυτές οι περιπτώσεις τότε να γίνει break , ουσιαστικά να τελειώσει ο έλεγχος του πίνακα διότι έχουν ελεγχθεί όλα τα στοιχεία.
Σε περίπτωση όπου η συγκεκριμένη θέση του πίνακα δεν είναι κενή αλλά το  αντικείμενο vehicle που δείχνει ο δείκτης εκείνης της θέσης του πίνακα δεν είναι σε ετοιμότητα δηλαδή η μεταβλητή ready του είναι ίση με 0 τότε να αυξηθεί το p κατά ένα, προκειμένου να ελεγχθεί το επόμενο στοιχείο του πίνακα , όπου αν είναι κενή η επόμενη θέση δηλαδή δεν δείχνει πουθενά ο δείκτης της η έχει φτάσει στο τέλος του ο έλεγχος του πίνακα δηλαδή το προηγούμενο αντικείμενο που εξετάστηκε ήταν το τελευταίο τότε να τελειώσει ο έλεγχος του πίνακα μέσω του break. 
Στην συνέχεια εξετάζεται η περίπτωση αν ο δείκτης σε εκείνη την θέση του πίνακα δείχνει σε κάποιο αντικείμενο και ο προορισμός του αντικειμένου αυτού είναι ίδιος με την θέση του τμήματος στον πίνακα τοτε να καλεσθεί η συνάρτηση exit του τμήματος , στην περίπτωση αυτή δεν εξετάζεται αν είναι το όχημα έτοιμο διότι έχει εξεταστεί στην προηγούμενη ακριβώς περίπτωση δηλαδή σε περίπτωση που δεν είναι έτοιμο θα γινόταν η ακριβώς πάνω περίπτωση .Η συνάρτηση exit είναι υπεύθυνη για την έξοδο του οχήματος απο το τμήμα .
Αν δεν συμβαίνει καμία απο τις παραπάνω περιπτώσεις τότε ,η περίπτωση που μένει είναι να μεταφερθεί το όχημα σε κάποιο επόμενο τμήμα. Επομένως αν δεν συμβεί κάποια απο τις παραπάνω περιπτώσεις τότε θα ελεγχθεί αρχικά αν ο δείκτης στην θέση του πίνακα δείχνει σε αντικείμενο σε περίπτωση που δεν δείχνει θα σταματήσει ο έλεγχος ,   στην συνέχεια θα καλεσθεί η συνάρτηση pass η οποία είναι υπεύθυνη για την μεταφορά του οχήματος σε κάποιο άλλο τμήμα , αν η τιμή που επιστρέψει η συνάρτηση pass είναι ίση με 1 τότε θα σταματήσει ο έλεγχοςΗ μεταβλητή pas αυτό θα ελέγχει αν είναι μηδέν ή ένα η τιμή που θα επιστρέψει η συνάρτηση pass (ουσιαστικά η περίπτωση που θα επιστρέψει 1 η συνάρτηση pass είναι η περίπτωση που δεν θα γίνετε η μεταφορά του οχήματος απο το συγκεκριμένο τμήμα σε ένα άλλο διότι είναι γεμάτο το άλλο τμήμα ).
Τέλος θα αυξηθεί το p κατα 1 για να ελεγχθεί η επόμενη θέση. 
Έπειτα σε περίπτωση που αφαιρεθεί έστω και ένα αντικείμενο απο τον πίνακα (δηλαδή το πρώτο ) θα γίνει ταξινόμηση των στοιχείων του πίνακα η οποία ακολυθεί στην συνέχεια γιαυτό και ορίζονται τρεις μεταβλητές οι οποίες θα χρησιμοποιηθούν σαυτήν. Δηλαδή αν ο δείκτης ο πρώτος του πίνακα δεν δείχνει πουθενά τότε θα δείχνει εκεί που δείχνει ο δείκτης της επόμενης θέσης του , ομοίως και ο δείκτης στην  δεύτερη θέση του πίνακα θα δείχνει εκεί που δείχνει η επόμενη θέση του πίνακα , ομοίως και με τα υπόλοιπα στοιχεία του πίνακα μέχρι να δείχνουν όλα τα στοιχεία του πίνακα σε κάποιο αντικείμενο ή μέχρι καλύτερα μέχρι να δείχνει σε κάποιο αντικείμενο  η πρώτη θέση ή μέχρι καμία απο τις ενδιάμεσες θέσης να μην δείχνει σε κάποιο στοιχείο (ναμην υπάρχει κενό ενδιάμεσα δηλαδή).
Συγκεκριμένα μέσα στην τελευταία for της συνάρτησης  το i παίρνει την τιμή του ποσοστού ετοιμότητας και η for εκτελείται μέχρι το i να φτάσει στην τελευταία θέση του πίνακα δηλαδή στην θέση _capacity_of_vehicles_in_part-1 ουσιαστικά το i θα πάρει την τιμή του percent διότι θα γίνουν τόσες αφαιρέσεις αρχικά όσες η τιμή του percent oπότε το i αναφέρεται απευθείας στην θέση που μετά τις αφαιρέσεις θα έχει κάποιο αντικείμενο ώστε αυτό να έρθει στην πρώτη θέση και ύστερα το επόμενο του να έρθει στην δύτερη θέση και πάει λέγοντας άρα το i θα αρχικοποιηθεί με την τιμή της θέσης του πίνακα , η οποία θα έχει πρώτη ένα αντικείμενο μετά τις αφαιρέσεις που θα γίνουν στον πίνακα (στην περίπτωση που το ποσοστό είναι ίσο με μηδέν τότε δεν θα γίνει η διαδικασία διότι κατά τον έλεγχο i<<_capacity_of_vehicles_in_part θα σταματήσει η διαδικασία) . Στην εσωτερική for το j παίρνει την τιμή του i και η τιμή αυτή θα χρησιμοποιηθεί για τον προσδιοριμό επόμενων και προηγούμενων θέσεων του πίνακα στην συνέχεια , η μεταβλητή count θα είναι ένας μετρήτης ο σκοπός του οποίου είναι η ακριβώς απο κάτω διαδικασία αντιστοίχισης να γίνει ορισμένες φορές σε κάθε στοιχείο του πίνακα , συγκεκριμένα  τόσες φορές όσες η τιμή του ποσοστού ετοιμότητας , αυτό γίνεται,  διότι στην ουσία ένα τμήμα αν έχει για παράδειγμα 4 οχήματα ο πίνακας και το ποσοστό ετοιμότητας είναι 3 τότε θα φύγουν 3 οχήματα απο τον πίνακα , άρα στην πρώτη θέση του πίνακα στην οποία ένας δείκτης δείχνει σε αντικείμενο μετά τις αφαιρέσεις το αντικείμενο αυτό θα πρέπει να το δείχνει ο πρώτος δείκτης διότι οι τρείς πρώτοι δείκτες δεν δείχνουν πουθενά άρα το  αντικείμενο αυτό  θα πρέπει να μεταφερθεί τρείς φορές προς τα πίσω άρα η διαδικασία θα γίνει 3 φορές , αυτός λοιπόν είναι ο σκοπός του count να γίνει η συγκεκριμένη διαδικασία μόνο συγκεκριμένες φορές .Μέσα στην εσωτερική for αυτο που γίνεται είναι ο δείκτης στην προηγούμενη ακριβώς απο την θέση j θα δείχνει εκεί πυο δείχνει o δείκτης στην θέση j και ο δείκτης στην θέση j δεν θα δείχνει πουθενά στην συνέχεια αυξάνεται το count κατά 1 και το j αφαιρείται κατά ένα για να γίνει έλεγχος για το την θέση j-1 τώρα και την προηγούμενη της j-2. Αν έχουμε το προηγούμενο παράδειγμα δηλαδή στο τμήμα ο πίνακας να εχει χωρητικότητα  ίση με 4 οχήματα και 3 οχήματα είναι σε ετοιμότητα τότε θα φύγουν απο το τμήμα στα επόμενα βήματα τρία οχήματα απο το τμήμα , οπότε στο τμήμα στις τρείς πρώτες θέσεις δεν βρίσκεται κανένα όχημα , μόνο στην τέταρτυη θέση (στην θέση 3 δηλαδή τυ πίνακα )στην οποία ο δείκτης που περιέχεται δείχνει σε ένα αντικείμενο τύπου vehicle . Άρα ακολουθεί η ταξινόμηση του πίνακα δηλαδή το αντικείμενο που δείχνει ο δείκτης στην θέση 3 του πίνακα θα πρέπει να δείχνεται απο την δείκτη στην θέση 0 . Άρα το  i θα πάρει την τιμή 3 (εφόσον είναι η πρώτη θέση του πίνακα της οποίας ο δείκτης δείχνει σε κάποιο αντικείμενο)και ομοίως το j,  γίνεται ο έλεγχος count<percent όπου το count<3 , ισχύει,  άρα θα εκτελεστεί η ανάλογη διαδικασία επομένως ο δείκτης στην θέση 2 του πίνακα θα δείχνει εκεί που δείχνει ο δείκτης στην θέση 3 και ο δείκτης στην θέση 3 δεν θα δείχνει σε κάποιο αντικείμενο.
Οπότε θα αυξηθεί το count κατά 1 και θα μειωθεί το j κατά 1 άρα το count=1 και j =2 το count είναι ακόμα μικρότερο του 3 οπότε θα ξαναγίνει η ίδια διαδικασία  , όπου ο δείκτης στην θέση 1 θα δείχνει εκει που δείχνει ο δείκτης στην θέση 2 στο αντικείμενο δηλαδή που έδειχνε αρχικά ο δείκτης στην θέση 3 και ο δείκτης στην θέση 2 δεν θα δείχνει κάπου , έπειτα θα αυξηθεί το count κατά ένα και j θα μειωθεί κατά 1 και θα ξαναγίνει μια ακόμη φορά η ίδια διαδικασία κατά την οποία ο δείκτης στην πρώτη θέση του πίνακα θα δείχνει στο αντικείμενο που έδειχνε ο δείκτης στην τρίτη θέση και στην συνέχεια θα αυξηθεί το i κατά 1 για να γίνει το ίδιο για την επόμενη θέση του πίνακα που δείχνει σε αντικείμενο μετά τις αφαιρέσεις. 
Έπειτα θα γίνουν οι κατάλληλες εκτυπώσεις  για κάθε όχημα.

Highway_part::pass
Η συνάρτηση αυτή έχει ως σκοπό την μεταφορά των οχημάτων στο επόμενο τμήμα και απο εκεί το όχημα να πάει σε άλλα τμήματα ή και στην έξοδο . Στην συνέχεια ο δείκτης τύπου vehicle με το όνομα transporter θα δείχνει εκεί που δείχνει ο δείκτης στην θέση p του πίνακα όπου η τιμή του p δίνεται σαν όρισμα στην συνάρτηση , έπειτα θα γίνει αναζήτηση στον πίνακα του επόμενου τμήματος για κενή θέση ώστε να τοποθετηθεί το όχημα αυτού του τμήματος που βρισκόμαστε το οποίο βρίσκεται σε ετοιμότητα , αυτό θα γίνει μέσω μιας while όπου στην παρένθεση ο δείκτης this δείχνει στην διεύθυνση του τμήματος που βρισκόμαστε εκείνη την στιγμή και αναφέρεται μέσω του pointernext στο επόμενο τμήμα , άρα αυτό που λέει είναι ότι όσο στην συγκεκριμένη θέση που εξετάζεται στον πίνακα (του τμήματος που δείχνει ο δείκτης pointernext του τμήματος που βρισκόμαστε ), ο δείκτης δείχνει σε κάποιο αντικείμενο τότε να συνεχιστεί ο έλεγχος στις επόμενες θέσεις του πίνακα μέχρι να βρεθεί μια θέση στο πίνακα με δείκτη ο οποίος δεν δείχνει σε κάποιο αντικείμενο. Απο κάτω εξετάζεται η περίπτωση που ο πίνακας του τμήματος που δείχνει ο pointernext του τμήματος που βρισκόμαστε έχει φτάσει κατά τον έλεγχο για δείκτη του πίνακα που δεν δείχνει σε κάποιο αντικείμενο,  στο τελευταίο σημείο του πίνακα  και στο τελευταίο σημείο του πίνακα ο δείκτης δείχνει σε κάποιο αντικείμενο  δεν μπορεί να γίνει μεταφορά οχήματος διότι είναι γεμάτος ο πίνακας τότε να επιστρέψει ένα 1 η συνάρτηση δηλαδή να τελειώσει.
Aν όμως το n < του μεγέθους του πίνακα δηλαδή υπάρχουν δείκτες στον πίνακα του επόμενου τμήματος οι οποίοι δεν δείχνουν σε κάποιο αντικείμενο τότε αρχικά ο δείκτης στην θέση p του πίνακα array2  θα δείχνει null δηλαδή δεν θα δείχνει κάπου δηλαδη .Έπειτα ο μετρητής οχημάτων θα μειωθεί και ο μετρητής των έτοιμων οχημάτων θα μειωθεί έπειτα θα γίνει εκτύπωση  της διέυθυνσης  του οχήματος που θα μεταφερθεί και θα εκτυπωθεί και ο αριθμός των οχημάτων του τμήματος, έπειτα  η πρώτη θέση με δείκτη που δεν δείχνει σε κάποιο αντικείμενο του πίνακα του επόμενου τμήματος θα δείχνει εκεί που δείχνει ο δείκτης transporter και θα αυξηθεί ο μετρητής οχημάτων του επόμενου τμήματος και θα αυξηθεί ο αριθμός των οχημάτων του επόμενου τμήματος και ομοίως θα αυξηθεί ο μετρητής count5 (o οποίος μετράει το πόσα οχήματα μεταφέρονται σε άλλα τμήματα)και θα γίνουν οι επόμενες εκτυπώσεις. Αν δεν επιστραφεί 1 (δεν έχει γίνει δηλαδή η περίπτωση 345 )απο την συνάρτηση στο τέλος θα επιστραφει 0.
Σε κάθε περίπτωση που ένα όχμα πρόκειται να μεταφερθεί σε ένα άλλο τμήμα αυτό που θα γίνει είναι να μεταφερθεί στο ακριβώς επόμενο τμήμα και στην συνέχεια να μεταφερθεί απο εκεί στον προορισμό του κάθε φορά διασχίζοντας κατά ένα τα τμήματα ένα όχημα. 

Highway_part::exit
Η συνάρτηση αυτή ευθύνεται για την έξοδο των οχημάτων απο το τμήμα . Δίνεται σαν όρισμα η τιμή του p για την θέση που θα μεταφερθεί στην έξοδο το όχημα .Αυτό που θα γίνει είναι ο δείκτης στην θέση αυτή του πίνακα να μην δείχνει σε κάποιο αντικείμενο και να αφαιρεθέι ο αριθμός των οχημάτων του τμήματος εκτυπώνοντας  το και την θέση του τμήματος εκείνη την στιγμή επίσης μειώνεται ο μετρητής έτοιμων οχημάτων.

Highway_part::enter_highway
Η συνάρτηση αυτή ευθύνεται για την είσοδο οχημάτων απο τα διόδια στο τμήμα.
Στην συνάρτηση αυτή αυτο που θέλω να επιτευχθει ουσιαστικά είναι να γίνονται είσοδοι οχημάτων απο τα διόδια των δύο τύπων εναλλάξ, δηλαδή να δωθεί αρχικά απο ένα διόδιο με υπάλληλο ένα όχημα έπειτα να δωθεί όχημα απο ένα διόδιο ηλεκτρονικό  έπειτα πάλι απο ένα διόδιο με έναν υπάλληλο,  όσο υπάρχουν κενές θέσεις στον πίνακα οχημάτων του τμήματος και επιτρέπεται η προσθήκη οχημάτων. Επομένως να συμμετέχουν και τα δύο είδη διοδίων στην προσθήκη οχημάτων στον πίνακα οχημάτων του τμήματος.Η  count1  είναι υπεύθυνη για'υτην την εναλλαγή ενώ οι μεταβλητές count3 και count4 μετράνε πόσα οχήματα πάρθηκαν απο τα διόδια με υπαλλήλους και ποσα οχήματα πάρθηκαν απο τα ηλεκτρονικά διόδια αντίστοιχα.Η μεταβλητή count1  λειτουργεί ως flag.
Επομένως μέσα στο while αυτο που εξετάζεται είναι όσο το q είναι μικρότερο του μεγέθους του πίνακα δηλαδή όσο δεν έχουν προσπελαστεί όλες οι θέσεις του πίνακα τότε για το συγκεκριμένο q να εξεταστεί αν σε εκείνη την θέση του πίνακα ο δείκτης δείχνει κάπου , σε περίπτωση που δεν δείχνει σε κάποιο αντικείμενο , τότε να αυξηθεί κατά 1 το q για να ελεγχθει επόμενη θέση . Στην γραμμή 354 και 365 ξεκινάει η βασική διαδικασία (οι προηγούμενες περιπτώσεις είναι ειδικές) κατά την οποία αν το count1 είναι ίσο με μηδέν (όπου κάθε φορά που το count1=0 θα παρθεί ένα όχημα απο διόδιο με υπάλληλο )και το count3 είναι μικρότερο του Κ δηλαδή δεν έχει φτάσει τον μέγιστο αριθμό οχημάτων που μπορεί να δώσει τότε εξετάζετε αν το qμικρότερο του μεγέθους του πίνακα δηλαδή αν δεν έχουν προσπελαστεί ακόμα όλες οι θέσεις του πίνακα και αν στην συγκεκριμένη θέση του πίνακα ο δείκτης δεν δείχνει σε κάποιο αντικείμενο , σε περίπτωση που ισχύουν οι προυποθέσεις αυτές τότε στην συγκεκριμένη θέση του πίνακα ο δείκτης να δείχνει στο αντικείμενο τύπου vehicle που θα επιστρέψει η συνάρτηση enter1 της εισόδου και εφόσον πάρθηκε όχημα απο διόδιο με υπάλληλο τότε θα αυξηθεί κατά ένα το count3 όπως και το count1 θα αυξηθεί κατά ένα προκειμένου να παρθεί για την επόμενη κενή θέση όχημα απο ηλεκτρονικό διόδιο (όταν το count1 είναι ίσο με 1 αυτό σημαίνει ότι θα παρθεί όχημα απο ηλεκτρονικό διόδιο) και φυσικά θα αυηθεί το q κατά ένα για να ελεγχθεί η επόμενη θέση του πίνακα μήπως μπορεί να εισέλθει και άλλο όχημα. Έπειτα ελέγχεται αν το count1 είναι ίσο με το 1 και αν το count4 είναι μικρότερο απο τον μέγιστο αριθμό οχημάτων που μπορούν να δωθούν απο ένα ηλεκτρονικό διόδιο , αν ισχύουν τότε θα ελεγχθεί αν το q είναι μικρότερο του μεγέθους του πίνακα οχημάτων του τμήματος, δηλαδή δεν έχει προσπελαστεί όλος ο πίνκας και αν στην συγκεκριμένη θέση του πίνακα που εξετάζεται ο δείκτης δεν δείχνει σε κάποιο αντικείμενο τότε είναι εφικτό να παρθεί ένα όχημα , το οποίο συγκεκριμένα θα παρθεί απο ηλεκτρονικό διόδιο και θα αυξηθεί κατά ένα η μεταβλητή count4 εφόσον πάρθηκε όπως είπα απο ηλεκτρονικό διόδιο όχημα και θα αυξηθεί το q κατά ένα για να ελεγχθεί η επόμενη θέση του πίνακα αν ο δείκτης της δεν δείχνει κάπου ώστε να της δωθεί κάποιο αντικείμενο . Τέλος σε περίπτωση που ο μετρητής count3 είναι ακόμα μικρότερος του Κ τότε να δωθεί στον count1 η τιμή 0 ώστε να παρθεί όχημα απο διόδιο με υπάλληλο στην επόμενη κενή θέση του πίνακα αν υπάρχει. 
Στις προηγούμενες περιπτώσεις ξεκινώντας απο την γραμμή 344 εξετάζετε αν το count3 είναι ίσο με K δηλαδή αν τα διόδια υπαλλήλων έχουν φτάσει τον μέγιστο αριθμό οχημάτων που μπορούν να δώσουν σε ένα τμήμα και αν ο μετρητής count4 είναι μικροτερος απο τον μέγιστο αριθμό οχημάτων που μπορεί να προσφέρει ένα ηλεκτρονικό διόδιο τότε να δωθεί στο count1 η τιμή 1 δηλαδή αν παρθεί όχημα να παρθεί το όχημα μόνο απο ηλεκτρονικό διόδιο καθώς τα διόδια με υπαλληλο δεν μπορούν να προσφέρουν άλλο όχημα λόγω του ότι προσφέραν το μέγιστο που μπορούν. Ακριβώς επόμενη είναι η περίπτση όπου και το count4 έχει φτάσει την μέγιστη τιμή δηλαδή τα ηλεκτρονικά διόδια δεν μπορούν να προσφέρουν άλλο όχημα τότε να γίνει break να σταματήσουν οι επαναλήψεις της while. 
Όταν λοιπόν τελειώσει η παραπάνω διαδικασία δηλαδή προσπελαστούν όλες οι θέσεις ή οι είσοδοι οχημάτων απο διόδια φτάσουν Κ+2Κ απο κάθε είδος διοδίου αντίστοιχα τότε θα εξεταστεί στην γραμμή 381 αν το count3 είναι ίσο με Κ και το count4 είναι ίσο με 2*Κ έχει δηλαδή γίνει ο μέγιστος αριθμός εισόδων οχημάτων στο τμημα απο κάθε διόδιο  τότε το Κ  να αυξηθεί κατά 1 στο τμήμα , σε περίπτωση που δεν ισχύει αυτό τότε στην γραμμή  388 το Κ του τμήματος να μειωθεί κατά 1 και να εκτυπωθεί το ανάλογα μήνυμα  . Στην συνέχεια  αν η μεταβλητή count5 η οποία μετράει το πόσα οχήματα μεταφέρονται στο τμήμα είναι μικρότερη απο τον αριθμό των οχημάτων που είναι σε ετοιμότητα τότε να εκτυπωθεί ανάλογο μήνυμα αλλιώς να εκτυπωθεί άλλο μήνυμα σύμφωνα με την εκφώνηση. 

Highway_part::~Highway_part
Στον destructor της κλάσης αυτής αυτο που θα γίνει ουσιαστικά είναι να διαγραφεί ο πίνακας με τα οχήματα του τμήματος συγκεκριμένα κάθε θέση που δεν είναι Null θα διαγράφεται και στο τέλος ο πίνακας ο ίδιος θα διαγραφτεί ομίως θα διαγραφτεί και η είσοδος του τμήματος.

tolls
Ουσιαστικά μέσω της κλάσης αυτής αξιοποιείται η κληρονομικότητα στο πρόγραμμα. Η κλάση αυτή αποτελεί την μητρική στις υποκλάσεις tolls_collector και tolls_etolls.
Στο .h αρχείο έχουμε στο public μέλος τον constructor της κλάσης , την συνάρτηση entering και τον destructor της κλάσης .  
Η κλάση vehicle προηγείται απο τις κλάσεις των διοδίων διότι χρησιμοποιούνται αντικείμενα τύπου vehicle.

tolls entering 
H συνάρτηση αυτή είναι pure virtual κάνοντας εικονική την κλάση tolls ,διότι  αρχικά  δεν διαθέτει κάποια λειτουργία και στην συνέχεια του προγράμματος κάθε υποκλάση θα διαθέτει μια ξεχωριστή συνάρτηση με την ίδια υπογραφή αλλά λίγο διαφορετική λειτουργεία , ενώ  στα αντικείμενα των υποκλάσεων θα δείχνουν δείκτες τύπου tolls οπότε όταν θα καλείται η συνάρτηση αυτή κάθε φορά θα καλείται η συνάρτηση του τύπου κλάσης που θα δείχνουν οι δείκτες τύπου tolls γιαυτό είναι virtual η συνάρτηση και pure διότι δεν διαθέτει κάποια λειτουργία όπως αναφέρθηκε.Θα γίνει περισσότερη εξήγηση για το συγκεκριμένο σημείο στην συνέχεια.

tolls::tolls
Ο constructor της κλάσης αυτής θα εκτυπώνει ένα μήνυμα για την κατασκευή του.

tolls::~tolls 
Ο destructor αυτός το μόνο θα εκτυπώσει το μήνυμα καταστροφής της "μητρικής" κλάσης.


tolls_collector
H κλάση αυτή αποτελεί το ένα είδος διοδίων και εφόσον είναι είδος διοδίου θα είναι υποκλάση της κλάσης tolls.
Στο .h αρχείο στο private μέρος έχουμε την τιμή όσον αφορά τη χωρητικότητα απο αυτοκίνητα του διοδίου capacity_of_vehicles_in_toll1 ,τον αριθμό των τμημάτων Nsegs , την θέση του τμήματος στο οποίο βρίσκεται το διόδιο  _place , τον πίνακα array3 ο οποίος πίνακας θα είναι ο αποθηκευτικός χώρος των οχημάτων του διοδίου, ένας δείκτης που δείχνει σε όχημα με το όνομα ptr και ένας μετρητής με όνομα count. Στο public μἐρος υπάρχει constructor και ο destructor και μια συνάρτηση με ίδια υπογραφή όπως την συνάρτηση tolls η entering. 


tolls_collector::tolls_collector
Ο constructor της κλάσης αυτής δέχεται ως ορίσματα τις μεταβλητές capacity_of_vehicles_in_part η οποία διαθέτει την τιμή της χωρητικότητας απο αμάξια σε ένα τμήμα , την μεταβλητή Nsegs η οποία διαθέτει την τιμή των τμημάτων μέσα στην Αττική οδό και την μεταβλητή parts_place η οποία θα αποτελεί την θέση του τμήματος που δημιουργούνται τα διόδια εκείνη την στιγμή . Αρχικά θα καλεσθεί ο constructor της μητρικής της κλάσης tolls εφόσον η tolls_collector είναι παραγόμενη.Έπειτα οι parts_place και η Nsegs θα χρησιμοποιηθούν για την αρχικοποίηση στην συνέχεια του constructor όλων των  οχημάτων που θα δημιουργηθούν στο διόδιο αυτό , ενώ η μεταβλητή capacity_of_vehicles_in_part θα δωθεί στην μεταβλητή capacity_of_vehicles_in_tolls1 η οποία θα δωθεί στον παρακάτω πίνακα με οχήματα για το διόδιο για το μέγεθος του , αλλά και σε άλλες συναρτήσεις στην συνέχεια.Τέλος τo όρισμα Nsegs θα δωθεί στην μεταβλητή _Nsegs προκειμένου να χρησιμοποιηθεί αργότερα στην συνάρτηση entering όπως και το όρισμα parts_place θα δωθεί στην μεταβλητή _place για να χρησιμοποιηθεί ομοίως και αυτή η μεταβλητή στην συνάρτηση entering παρακάτω.
Αρχικά θα εκτυπωθεί το μήνυμα για τη δημιουργία των διοδίων.Στην συνέχεια δημιουργείται ένας δυναμικός πίνακας array3 τύπου vehicle ** ο οποίος αρχικά θα αποτελεί τον χώρο μέσα απο τον οποίο θα αποθηκεύονται τα οχήματα του διοδίου και μέσω αυτού θα μεταφέρονται και δεύτερον θα έχει μέγεθος ίσο με capacity_of_vehicles_in_toll1 όπου αυτός ο αριθμός ισούται με την χωρητικότητα ενός τμήματος σε αμάξια , ουσιαστικά η επιλογή του μεγέθους αυτού είναι κάθε διόδιο με υπαλλήλους στην περίπτωση αυτή να έχει τόσα αμάξια όσο και το τμήμα που το περιέχει προκειμένου να είναι σε θέση να προσφέρει συνεχώς στο τμήμα μέσω της εισόδου. Τα διόδια ανεξάρτητα το είδος θα πρέπει να είναι σε θέση να γεμίσουν όσο είναι δυνατό ένα τμήμα γιαυτό λοιπόν ακόμα και αν δημιουργηθεί μόνο ένα διόδιο τύπου διόδιο με υπάλληλο (διότι ο αριθμός των διοδίων που δημιουργούνται είναι τυχαίος )αυτο ακόμη και μόνο του να εχει την ικανότητα να γεμίσει ένα ολόκληρο τνήμα εφόσον θα έχουν ίδια χωρητικότητα.
Έπειτα μέσω ενός for loop γεμίζει ο πίνακας αυτός με οχήματα(συγκεκριμένα γεμίζει με δείκτες σε αντικείμενα τύπου οχήματα) και θα εκτυπώνεται η διεύθυνση του κάθε οχήματος.

tolls_collector::entering 
Η συνάρτηση αυτή αυτό που κάνει στην ουσία είναι να παίρνει ένα όχημα απο τον πίνακα οχημάτων να το επιστρέφει εκεί που κλήθηκε η συνάρτηση στην συνέχεια να γεμίζει την θέση που πάρθηκε το όχημα με ένα καινούργιο που θα δημιουργηθεί εκεί και να κάνει μια ταξινόμηση στον πίνακα όσον αφορά τα οχήματα .
Η συνάρτηση αυτή είναι τύπου vehicle* διότι θα επιστρέψει την διεύθυνση ενός αντικειμένου τύπου vehicle . Στην αρχή ο δείκτης τύπου vehicle  με όνομα ptr  θα χρησιμοποιηθεί για την μεταφορά της διεύθυνσης του αντικειμένου τύπου vehicle που θα μεταφερθεί απο τον πίνακα οχημάτων διοδίων και θα επιστραφεί εκεί που κλήθηκε η συνάρτηση.
Εκτυπώνεται η λέξη collectors προκειμένου να είναι γνωστό που γίνεται η συγκεκριμένη διαδικασία εκείνη την στιγμή.
Το όχημα που θα μεταφερθεί θα είναι το πρώτο όχημα στον πίνακα οχημάτων του διοδίου . Συγκεκριμένα ο δείκτης ptr θα δείξει εκεί που  δείχνει και ο δεἰκτης στο σημείο μηδέν του πίνακα δηλαδή στην διεύθυνση του αντικειμένου που θα μεταφερθεί.Οπότε ο δείκτης ptr θα δείχνει στην διεύθυνση αυτή ενώ ο δείκτης στην θέση 0 του πίνακα array3 θα δείχνει null, δεν θα δείχνει πουθένα μαυτό τον τρόπο "διαγράφεται" το στοιχείο απο τον πίνακα . Στην συνέχει ακολουθεί μια for loop για την διαδικασία ταξινόμησης κατα την οποία όλα τα στοιχεία θα μεταφερθούν στην προηγούμενη θέση απο αυτά , αυτό γίνεται διότι η πρώτη θέση ουσιαστικά θα είναι κενή και την επέμενη φορά που θα κληθεί η συνάρτηση δεν θα υπάρχει κάτι αντικείμενο στην θέση αυτή ώστε να το πάρει. Οπότε ορίζονται δύο ακέραιες μεταβλητές η i και count και μέσω των for loops γίνονται τα εξής:
η μεταβλητή i δείχνει τα στοιχεία του  array3 δηλαδή αρχικά ξεκινάει με την τιμή 1 διότι αναφέρεται στο δεύτερο στοιχείο του πίνακα και στην συνέχεια θα συνεχίσει στα άλλα στοιχεία του πίνακα μέχρι το τελευταίο καθώς αυξάνεται το i κάθε φορά . Στην εσωτερική συνάρτηση for η μεταβλητή count ουσιαστικά δείχνει το πόσες φορές θα γίνει η διαδικασία ενός αντικειμένου μια θέσης να μπεί στην προηγούμενη του θέση και αρχικιοποιείται με το μηδέν επίσης εφόσον αυτό θέλουμε για κάθε στοιχείο να γίνει η διαδικασία μία φορά δηλαδή απο την θέση του να μεταφερθεί στην προηγούμενη το count όταν γίνει 1 να σταματήσει και να πάει στην επόμενη θέση.Τέλος γίνεται μέσα στην εσωτερική for η διαδικασία όπου ο δείκτης που βρίσκεται στην προηγούμενη θέση ενός δείκτη του πίνακα θα δείχνει εκέι που δείχνει και ο επόμενος του δείκτης ενώ ο επόμενος του δείκτης θα σταματήσει να δείχνει εκέι που έδειχνε και δεν θα δείχνει πουθενά οπότε θα αυξηθεί η μεταβλητή count κατά ένα και δεν θα είναι πλέον μικρότερη του 1 οπότε θα συνεχίσει η ίδια διαδικασία για το επόμενο στοιχείο του πίνακα.Άρα έστω  ότι το μέγεθος του πίνακα είναι 3 και το πρώτο στοιχείο του έχει δωθεί , οπότε στην πρώτη for το i παίρνει την τιμή 1 , τo 1<3 άρα μπα΄νει στην εσωτερική for το count=0 άρα μικρότερο του 1 οπότε το στοιχείο array3[0] το πρώτο στοιχείο που δεν δείχνει πουθενά θα δείχνει εκεί που δείχνει το στοιχείο array3[1] εκεί που δείχνει δηλαδή το δεύτερο στοιχείο και απο κάτω το στοιχείο array3[1] το δεύτερο στοιχείο δεν θα δείχνει πουθενά επομένως στην συνέχεια το count θα αυξηθεί κατά 1 άρα δεν θα είναι μικρότερο του 1 πλέον οπότε θα συνεχιστεί η ίδια διαδικασία για το επόμενο στοιχείο του πίνακα για το στοιχείο στην θέση 2 το τρλιτο στοιχελιο δηλαδή , μόλις τελειώσει η διαδικασία και για το στοιχείο αυτό το i θα γίνει ίσο με 3 άρα δεν θα είναι πλέον μικρότερο του μεγέθους του πίνακα άρα εν τέλει θα προκύψει ένας πίνακα array3 με δείκτες στους οποίους ο τελευταίος δεν θα δείχνει πουθενά σε αντίθεση με την αρχή της διαδικασίας όπου ο πρώτος δείκτης δεν έδειχνε στην αρχή πουθενά.
Κάνοντας την διαδικασία αυτή η τελευταία θέση του πίνακα είναι "κενή" και κάπως πρέπει να γεμίσει για να είναι πάντα έτοιμο το διόδιο , το "γέμισμα " γίνεται στην συνέχεια όπου και το τελευταίο στοιχείο του πίνακα array3 θα δείχνει σε ένα καινούργιο αντικείμενο τύπου vehicle που θα δημιουργηθεί εκείνη την στιγμή ατην γραμμή 485 με τα ορίσματα που αναφέρθηκαν και παραπάνω , ενώ στο τέλος επιστρέφεται η διεύθυνση του αντικειμένου vehicle που δείχνει ο δείκτης ptr και το οποίο αντικείμενο ήταν το πρώτο αντικείμενο του πίνακα array3 αρχικά.   
Αφού επιστραφεί το όχημα θα εκτυπωθεί ο πίνακας array3 δηλαδή τα περιεχόμενα του διοδίου.

tolls_collector::~tolls_collector
Στον destructor της κλάσης αυτής διαγράφονται τα στοιχεία του πίνακα οχημάτων των διοδίων  εφόσον δεν είναι κενά , ενώ ταυτόχρονα θα εκτυπώνονται οι διευθύνσεις των οχημάτων που διαγράφονται και στην συνέχεια διαγράφεται ο πίνακας , ενώ εκτυπώνεται ένα μήνυμα για την διαγραφή του.


tolls_etolls::tolls_etolls
Ο constructor της κλάσης αυτής υλοποιείται με τον ίδιο ακριβώς τρόπο όπως και η κλάση tolls_collector. Με τον ίδιο τρόπο θα δημιουργηθεί ένας δυναμικός πίνακας array4 με δείκτες σε αντικείμενα τύπου vehicle και θα έχει την ίδια χωρητικότητα με τον πίνακα του διοδίου tolls_collector .

tolls_etolls::entering
Η συνάρτηση αυτή επίσης θα είναι όμοια με την συνάρτηση entering των διοδίων tolls_collector η διαφορά είναι ότι αναφέρεται στον πίνακα οχημάτων array4.

tolls_etolls::~tolls_etolls
Στον destructor της κλάσης αυτής ουσιαστικά θα διαγράφονται τα στοιχεία του πίνακα και στο τέλος ο πίνακας οχημάτων.


vehicle 
Η κλάση αυτή θα αντικατοπτρίζει τα οχήματα στο πρόγραμμα.
Στο .h αρχείο έχουμε ότι στο private μέλος της κλάσης μια μεταβλητή ready που δείχνει αν είναι έτοιμο ένα όχημα με την τιμή 0 ή έτοιμο με την τιμή 1 , επίσης η μεταβλητή vehicle_place θα δείχνει την θέση του τμήματος στο οποίο βρίσκεται το όχημα και μια μεταβλητή destination για τον προορισμό του οχήματος . Στο public μέρος της κλάσης δηλώνεται ο constructor της κλάσης, ο destructor της , μια συνάρτηση ready_or_not η οποία θα μας δίνει την τιμή του ready διότι είναι ιδιωτική η μεταβλητή αυτή και δεν θέλουμε να είναι εμφανής σε άλλες κλάσεις άμεσα αλλά μέσω της συνάρτησης αυτής.
Επίσης η συνάρτηση ready_vehicle() θα 'ετοιμάζει' ένα όχημα, θα του δίνει δηλαδή την τιμή 1 ώστε να θεωρείται έτοιμο , η συνάρτηση set_destinatio() δίνει ένα προορισμό στο όχημα δηλαδή μια τιμή στην μεταβλητή destination και τέλος η συνάρτηση get_destination δίνει την τιμή της μεταβλητής destination του οχήματος , o σκοπός των δύο αυτών συναρτήσεων είναι να μην υπάρχει άμεση προσβαση στην μεταβλητή destination αλλα να την χειρίζονται μέσω των συναρτήσεων αυτών άλλες κλάσεις .  

vehicle::vehicle
Ο constructor της κλάσης θα δεχθεί των αριθμό των τμημάτων της Αττικής οδού όπου θα χρησιμοποιηθεί στην συνέχεια και θα δεχθεί σαν όρισμα την θέση που βρίσκεται το όχημα εκείνη την στιγμή δηλαδή σε ποιο τμήμα θα βρίσκεται στην Ατιική οδό, η θέση αυτή θα δωθεί στην μεταβητή vehicle_place η οποία θα χρησιμοποιηθεί ομοίως στην συνέχεια.
Aυτό που θα γίνει στον constructor είναι ότι αρχικά σε περίπτωση όπου η θέση που βρίσκεται το όχημα δεν είναι ίση με τον αριθμό των τμημάτων δηλαδή στην περίπτωση που η θέση του οχήματος δεν είναι τελευταια τότε ο προορισμός του θα προκύψει απο μια τυχαία τιμή η οποία ουσιαστικά ξεκινάει απο την θέση του τμήματος στο οποίο βρίσκεται το όχημα  μέχρι την τιμή Nsegs-1 (το τελευταίο δηλαδή τμήμα στον πίνακα τμημάτων που μπορεί να έχει σαν προορισμό ένα ενδιάμεσο τμήμα ) .
Σε περίπτωση που το όχημα βρίσκεται στο τελευταίο τμήμα ο προορισμός του θα είναι το τελευταίο τμήμα που ήδη βρίσκονται και θα εκτυπωθεί ένα ανάλογο μήνυμα κατασκευής του οχήματος.


vehicle::~vehicle 
Ο destructor της συνάρτησης αυτής απλώς εκτυπώνει ένα μηνυμα ότι καταστράφηκε το όχημα.


entrance
Στο .h αρχείο πριν της κλάση γίνεται δήλωση των κλάσεων των διοδίων διότι εμπρόκειτο να χρησιμοποιηθούν αντικεἰμενα τύπου κάποιου είδος διοδίου στην κλάση αυτή και μαυτόν τον τρόπο πραγματοποιείται το class forwarding .
Στο private μέλος υπάρχει μια μεταβλητή name_of_entrance για το όνομα της εισόδου δηλαδή μια μεταβλητή που μας δείχνει σε ποιό τμήμα αντιστοιχεί η είσοδος,η μεταβλητή t και η μεταβλητή t2 θα χρησιμοποιηθούν στις συναρτήσεις enter1 και enter2 για την προσπέλαση των στοιχείων των πινάκων tolls1 και tolls2 της εισόδου, οι πίνακες tolls1 και tolls2 τύπου tolls** θα αποτελούν τους πίνακες της εισόδου που θα διαθέτουν διόδια με εισπράκτορες και ηλεκτρονικά διόδια αντίστοιχα , οι δείκτες pointer1 και pointer2 θα δείχνουν σε οχήματα και θα χρησιμοποιηθούν στις συναρτήσεις enter1 και enter2 αντίστοιχα .   
Στο public μέρος υπάρχει ο constructor , o destructor της κλάσης και οι συναρτήσεις enter1 και enter2 για την εισαγωγή οχημάτων απο την είσοδο στο αντίστοιχο τμήμα.

entrance::entrance
H κλάση αυτή αντιπρωσοπεύει την είσοδο ενός τμήματος.
Η κλάση αυτή δέχεται ως όρισμα τη χωρητικότητα αμαξιών που διαθέτει το τμήμα της Αττικής οδού , τον αριθμό των τμημάτων της Αττικής οδού , τη θέση του τμήματος (που θα κληθεί η συνάρτηση αυτή) στον πίνακα με τα τμήματα , τον αριθμό των διοδίων με υπαλλήλους , τον αριθμό των ηλεκτρονικών διοδίων.Ο αριθμός των διοδίων με υπαλλήλους και ο αριθμός των ηλεκτρονικών διοδίων , δημιουργούνται αρχικά στην κλάση Highway όπου τους δίνεται μια τυχαία τιμή αντίστοιχα , οι τιμές αυτές έχουν βασικό ρόλο στην κλάση αυτή,  της εισόδου όπου θα δωθούν επίσης στις μεταβλητές _number_of_tolls1 και _number_of_tolls2 μέσω του initializer list και οι συγκεκριμένες μεταβλητές που θα αρχικοποιηθούν θα χρησιμοποιοθούν στην συνάρτηση enter1 και enter2 και στον destructor της κλάσης . Ουσιαστικά οι μεταβλητές αυτές που αποτελούν ορίσματα του constructor θα χρησιμοποιηθούν για την δημιουργία των δυναμικών πινάκων που θα περιέχουν διόδια από τα δύο είδη διοδίων . Πρακτικά οι πίνακες tolls1 και tolls2 θα αποτελούν δύο δυναμικούς πίνακες τύπου tolls οι οποίοι θα περιέχουν δείκτες σε αντικείμενα τύπου tolls_collector και tolls_etolls . Αυτό που προσπάθησα να κάνω εδώ ήταν να αξιοποιήσω με κάποιο τρόπο την κληρονομικότητα φτιάχνοντας δύο δυναμικόυς πίνακες τύπου "μητέρας κλάσης" των οποίων τα περιεχόμενα να είναι τύπου υποκλάσεις της, αυτό γίνεται προκειμένου να καλείται αυτόματα στην συνέχεια η συνάρτηση entering που θα είναι εικονική στην κλάση tolls και θα ορίζεται με τον ίδιο τρόπο σις υποκλάσεις όπου και σαυτές θα υλοποιούνται λίγο διαφορετικά διότι θα απευθύνονται σε διαφορετικά διόδια.
Επομένως στην κλάση αυτή θα δημιουργούνται και τα δύο είδη διοδίων κάθε τμήματος . Συγκεκριμένα δημιουργούνται με τη χρήση του new ένας πίνακας τύπου tolls1 με μέγεθος num_of_tolls και δημιουργείται ένας πίνακας tolls2 με μέγεθος num_of_tolls2,  στην συνέχεια  δύο βρόγχοι for γεμίζουν ξεχωριστά τους πίνακες με δείκτες των υποκλάσεων της κλάσης tolls. 
Αρχικά επίσης εκτυπώνεται μήνυμα δημιουργίας της εισόδου προσιορίζοντας ταυτόχρονα και την θέση του τμήματος που βρίσκεται.

entrance::~entrance
Στον destructor της κλάσης αυτής αυτό που θα γίνεται είναι να διαγράφονται τα περιεχόμενα του κάθε πίνακα και εν τέλει κάθε πίνακας εκτυπώνοντας ένα μήνυμα ότι καταστρέφεται η είσοδος.

entrance::enter1
H συνάρτηση αυτή επιστρέφει ένα δείκτη τύπου vehicle, ουσιαστικά είναι τέτοιου τύπου (vehicle *), διότι θέλω να επιστρέψει την διεύθυνση του αντικειμένου τύπου vehicle.
Στην συνάρτηση αυτή χρησιμοποιούνται η ακέραια μεταβλητή t , η ακέραια μεταβλητή _number_of_tolls , και ο δείκτης pointer1 τύπου vehicle . Αρχικά η μεταβλητή t έχει την τιμή μηδέν όπως έχει ορισθεί στο αρχείο .h , ενώ η τιμή number_of_tolls θα έχει την τιμή που της έχει δωθεί νωρίτερα όπου και θα παραμείνει η τιμή αυτή, όταν κληθεί η συνάρτηση αυτή , αυτό που θα συμβεί είναι να καλεσθεί η συνάρτηση entering η οποία θα επιστρέψει τη διεύθυνση (του πρώτου στον πίνακα οχημάτων του διοδίου) αντικειμένου τύπου vehicle στην συνάρτηση enter1 και η enter1 μέσω του δείκτη pointer1 θα επιστρέψει την διεύθυνση αυτού του αντικειμένου στην συνάρτηση όπου κλήθηκε η enter1 ώστε να τοποθετηθεί στον πίνακα που πρέπει ,( συγκεκριμένα ώστε ο δείκτης σε μια συγκεκριμένη θέση του πίνακα της κλάσης όπου θα κληθεί η enter1 να δείχνει σαυτό ) ωστόσο το λεπτό σημείο είναι ότι η υλοποίηση αυτή αυτό που γίνεται είναι κάθε φορά που καλείται η συνάρτηση enter1 θα καλείται η συνάρτηση entering για διαφορετικό διόδιο ο σκοπός είναι να παίρνει ένα όχημα απο ένα διόδιο και οταν ξανακαλεσθεί να πάρει ένα όχημα απο το επόμενο στον πίνακα tolls1 διόδιο , δηλαδή για παράδειγμα αρχικά καλείται η  συνάρτηση enter1 για πρώτη φορά,  αρχικά η μεταβητή t είναι ίση με μηδέν και έστω η τιμή της μεταβλητής _number_of_tolls είναι ίση με 3 , επομένως γίνεται ο πρώτος έλεγχος στον οποίο t=0<_number_of_tolls=3 εφόσον ισχύει θα καλεσθεί η συνάρτηση entering  του αντικειμένου τύπου tolls_collector του πίνακα tolls1 το οποίο θα βρίσκεται στην πρώτη θέση λόγω του t=0 η οποία συνάρτηση θα επιστρέψει την διεύθυνση ενός αντικειμένου κλάσης vehicle στο οποίο θα δείξει ο δείκτης pointer1 στην συνέχεια  θα αυξηθεί η τιμή του t πρικειμένου την επόμενη φορά που θα καλεσθεί η συνάρτηση enter1 θα καλεσθεί η συνάρτηση entering του αντικειμένου τύπου tolls_collector που βρίσκεται στην δεύτερη θέση του πίνακα tolls1 άρα κάθε φορά που καλείται η enter1 θα παίρνει ουσιαστικά ένα όχημα απο κάθε διόδιο και όχι απο ένα διόδιο μόνο. Η σκέψη για την υλοποίηση αυτή ήταν να συμμετέχουν στην διαδικασία γεμίσματος ενός τμήματος με οχήματα απο κάθε διόδιο με υπάλληλο αν γίνετε και απο κάθε διόδιο ηλεκτρονικό αντίστοιχα αν δεν γίνετε να παρθούν οχήματα απο κάθε διόδιο διότι μπορεί να γεμίσει το τμήμα τουλάχιστον να συμμετέχουν όσα περισσότερα γίνεται απο κάθε είδος διοδίου.
Οπότε συνεχίζοντας το παράδειγμα στην περίπτωση όπου το t γίνει ίσο με 3 αυτο σημαίνει ότι το t πριν ήταν ίσο με 2 και μάλιστα πάρθηκε όχημα απο την θέση 2 (την τελευταια δηλαδή του πίνακα tolls1) και αυξήθηκε κατά ένα το t άρα στην συνέχεια του προγράμματος  σε περίπτωση που  κληθεί η enter1 δεν θα ισχύει ο έλεγχος ο πρώτος , ωστόσο ο δεύτερος θα ισχύει και για να ισχύει ο δεύτερος αυτο σημαίνει ότι έχει παρθεί ένα όχημα απο κάθε διόδιο αυτού του τύπου , ουσιαστικά το t=3 αποτελεί και flag προκειμένου αν πραγματοποιηθεί δηλαδή το t πάρει την τιμή 3 τότε να εκτελστεί η κάτω περίπτωση η οποία είναι ειδική. Άρα εφόσον έχει παρθεί ένα όχημα απο κάθε διόδιο του πίνακα tolls1 και χρειάζεται να παρθεί άλλο ένα όχημα τύπυο tolls_collector θα παρθεί πάλι απο το πρώτο διόδιο του πίνακα tolls1 γιαυτο και το t γίνεται ίσο με το μηδέν και καλείται η συνάρτηση entering του πρώτου στοιχείου του πίνακα tolls1 και θα επιστραφεί η διεύθυνση του οχήματος που θα δείχνει ο δείκτης pointer1 .
Επομένως η γραμμή 638 ελέγχει αν το t έχει αριθμό μεταξύ του πρώτου και πριν του τελευταίου διοδίου ώστε να παρθεί όχημα από ένα απο αυτά τα διόδια . Στην γραμμή 643 εξετάζεται αν πρόκειται να παρθεί απο το τελευταίο διόδιο όχημα , οπότε την αμέσως επόμενη φορά που πρέπει να παρθεί απο αυτα τα διόδια όχημα να παρθεί απο το πρώτο ξανά (κυκλικά δηλαδή). 

entrance::enter2 
Η συνάρτηση αυτή είναι όμοια με την με την enter1 το μόνο που θα αλλάζει είναι η ονομασία στις μταβλητές t η οποία στην συνάρτηση αυτή θα λέγεται t2 και ο δείκτης pointer1 ο οποίος στην συνάρτηση αυτή θα ονομάζεται pointer2 , μια ακόμη διαφορά είναι ότι θα καλείται η συνάρτηση entering για κάθε αντικείμενο τύπου tolls_etools του πίνακα tolls2 , εκτός αυτών δεν διαθέτουν άλλες διαφορές και είναι όμοιες.

Σημείωση:Κάτι ακόμα που πρέπει να σχολιασθεί στις συναρτήσεις αυτές είναι ότι την enter1 και enter2 είναι ότι καλείται μια συνάρτηση , συγκεκριμένα η entering η οποία έχει το ίδιο όνομα για κάθε υποκλάση χωρίς να δημιουργείται κάποιο λάθος , στην συνάρτηση entering αξιοποιείται η κληρονομικότητα της . Ουσιαστικά η συνάρτηση entering δηλώνεται απλά στην κλάση tolls και μάλιστα ορίζεται ως pure virtual και όχι virtual διότι δεν υλοποιείται καθόλου στην κλάση tolls απλά δηλώνεται  και  σε κάθε υποκλάση θα είναι διαφορετική οπότε θα υλοποιείται ξεχωριστά σε κάθε υποκλάση αλλά και προφανώς αξιοποιείται η ιδιότητα της κληρονομικότητας προκειμένου να καλεσθεί αυτόματα η "σωστή" συνάρτηση entering αυτόματα.










